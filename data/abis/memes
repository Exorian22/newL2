async def add_liquidity(self):
        amount, amount_in_wei = await self.client.check_and_get_eth()

        self.logger_msg(
            *self.client.acc_info, msg=f'Add liquidity to SyncSwap USDC/ETH pool: {amount} ETH')

        token_a_address = TOKENS_PER_CHAIN[self.client.network.name]['ETH']
        token_b_address = TOKENS_PER_CHAIN[self.client.network.name]['USDC']

        pool_address = await self.pool_factory_contract.functions.getPool(token_a_address, token_b_address).call()
        pool_contract = self.client.get_contract(pool_address, SYNCSWAP_ABI['classic_pool'])

        total_supply = await pool_contract.functions.totalSupply().call()
        _, reserve_eth = await pool_contract.functions.getReserves().call()
        # fee = await pool_contract.functions.getProtocolFee().call()
        min_lp_amount_out = int(amount_in_wei * total_supply / reserve_eth / 2 * 0.9965)

        inputs = [
            [token_b_address, 0],
            [ZERO_ADDRESS, amount_in_wei]
        ]

        tx_data = [
            pool_address,
            inputs,
            abi.encode(['address'], [self.client.address]),
            min_lp_amount_out,
            ZERO_ADDRESS,
            '0x',
        ]

        if self.client.network.name == 'zkSync':
            inputs[0].append(True)
            inputs[1].append(True)
            tx_data.append(ZERO_ADDRESS)

        tx_params = await self.client.prepare_transaction(value=amount_in_wei)
        transaction = await self.router_contract.functions.addLiquidity2(
            *tx_data
        ).build_transaction(tx_params)

        return await self.client.send_transaction(transaction)